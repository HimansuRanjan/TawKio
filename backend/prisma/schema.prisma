// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id            String   @id @default(uuid())
  username      String   @unique
  email         String   @unique
  password      String
  bio           String?
  avatarId      String?
  avatarUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  //for reset password purpose
  resetPasswordToken   String? 
  resetPasswordExpire  DateTime?

  // Relations with cascade deletes
  posts         Post[]        
  comments      Comment[]       
  likes         Like[]          
  messages      Message[]       @relation("UserMessages")
  conversations Conversation[]  @relation("UserConversations")
}

model Post {
  id        String   @id @default(uuid())
  content   String?
  imageId   String
  imageUrl  String
  linkUrl   String?
  createdAt DateTime @default(now())

  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments  Comment[] 
  likes     Like[] 
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(uuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Phase - 2: Message and call 

model Conversation {
  id            String      @id @default(uuid())
  isGroup       Boolean     @default(false)
  createdAt     DateTime    @default(now())
  lastMessageAt DateTime?   @default(now())

  lastMessageId String?    @unique // âœ… must be unique
  lastMessage   Message?    @relation("LastMessage", fields: [lastMessageId], references: [id])

  participants  User[]      @relation("UserConversations")
  messages      Message[]   @relation("ConversationMessages")

  // âœ… NEW FIELD
  participantHash String?     @unique
}

model Message {
  id             String      @id @default(uuid())
  content        String?
  type           MessageType @default(TEXT)
  status         MessageStatus @default(SENT)
  attachmentUrl  String?
  callDuration   Int?
  createdAt      DateTime    @default(now())

  senderId       String
  sender         User        @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)

  // ðŸ‘‡ opposite field for "LastMessage" relation
  isLastMessageOf Conversation? @relation("LastMessage")


}

enum MessageStatus {
  SENT
  DELIVERED
  SEEN
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  CALL
}
